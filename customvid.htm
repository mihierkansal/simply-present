<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Custom Video Player</title>
    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/icon?family=Material+Icons"
    />
    <style>
      #video {
        height: 80vh;
        display: block;
      }
      #controls {
        display: flex;
        justify-content: center;
        align-items: center;
        margin-top: 10px;
        height: 2rem;
      }
      button {
        color: white;
        border: none;
        padding: 8px;
        width: min-content;
        cursor: pointer;
        background: transparent;
      }
      input[type="range"] {
        flex-grow: 1;
        margin: 0 10px;
        accent-color: rgb(111, 225, 225);
      }
      #video-container {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
    </style>
  </head>
  <body>
    <div id="video-container">
      <input type="file" id="video-input" accept="video/*" />
      <div style="position: relative">
        <video id="video">Your browser does not support the video tag.</video>
        <div
          id="controls"
          style="
            position: absolute;
            bottom: 0;
            background: #000000e6;
            width: 100%;
            transition: all 0.3s;
          "
        >
          <button id="rw10s">
            <i class="material-icons">replay_10</i>
          </button>
          <button id="play-pause">
            <i class="material-icons">play_arrow</i>
          </button>
          <button id="ff10s">
            <i class="material-icons">forward_10</i>
          </button>
          <input type="range" id="seek-bar" value="0" max="100" />
          <button id="mute"><i class="material-icons">volume_up</i></button>
        </div>
      </div>
    </div>

    <script>
      const videoInput = document.getElementById("video-input");
      const video = document.getElementById("video");
      const playPauseButton = document.getElementById("play-pause");
      const seekBar = document.getElementById("seek-bar");
      const muteButton = document.getElementById("mute");

      videoInput.addEventListener("change", (event) => {
        const file = event.target.files[0];
        if (file) {
          const fileURL = URL.createObjectURL(file);
          video.src = fileURL;
        }
      });
      controls.onmouseenter = () => {
        controls.style.opacity = "1";
        controls.onmouseleave = () => {
          controls.style.opacity = "0";
          controls.onmouseleave = undefined;
        };
      };
      playPauseButton.addEventListener("click", () => {
        if (video.paused) {
          video.play();
          setTimeout(() => {
            controls.style.opacity = "0";
            console.log("controlsHidingTimeout");
          }, 300);
          playPauseButton.innerHTML = "<i class='material-icons'>pause</i>";
        } else {
          video.pause();
          playPauseButton.innerHTML =
            "<i class='material-icons'>play_arrow</i>";
        }
      });

      seekBar.addEventListener("input", () => {
        const time = video.duration * (seekBar.value / 100);
        video.currentTime = time;
      });

      video.addEventListener("timeupdate", () => {
        const value = (100 / video.duration) * video.currentTime;
        seekBar.value = value;
        if (value === 100) {
          video.pause();
          playPauseButton.innerHTML =
            "<i class='material-icons'>play_arrow</i>";
        }
      });
      ff10s.addEventListener("click", () => {
        const FORWARD_DURATION = 10;
        video.currentTime += FORWARD_DURATION;
        seekBar.value += FORWARD_DURATION / video.duration;
      });

      rw10s.addEventListener("click", () => {
        const REWIND_DURATION = 10;
        console.log(video.duration);
        video.currentTime -= REWIND_DURATION;
        seekBar.value -= REWIND_DURATION / video.duration;
      });
      muteButton.addEventListener("click", () => {
        video.muted = !video.muted;
        muteButton.innerHTML = video.muted
          ? '<i class="material-icons">volume_off</i>'
          : '<i class="material-icons">volume_up</i>';
      });
    </script>
  </body>
</html>
